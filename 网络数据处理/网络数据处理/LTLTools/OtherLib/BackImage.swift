//
//  BackImage.swift
//  MK
//
//  Created by LiTaiLiang on 2017/11/16.
//  Copyright Â© 2017 MK. All rights reserved.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class BackImage: NSObject
{
    

    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawBackChevron(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 13, height: 21), resizing: ResizingBehavior = .aspectFit,color:UIColor = UINavigationBar.appearance().tintColor)
    {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 13, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 13, y: resizedFrame.height / 21)
        context.translateBy(x: -467, y: -309)
        
        /// Back Chevron
        let backChevron = UIBezierPath()
        backChevron.move(to: CGPoint(x: 0, y: 10.5))
        backChevron.addLine(to: CGPoint(x: 10.5, y: 0))
        backChevron.addLine(to: CGPoint(x: 12.5, y: 2))
        backChevron.addLine(to: CGPoint(x: 4, y: 10.5))
        backChevron.addLine(to: CGPoint(x: 12.5, y: 19))
        backChevron.addLine(to: CGPoint(x: 10.5, y: 21))
        backChevron.addLine(to: CGPoint(x: 0, y: 10.5))
        backChevron.close()
        backChevron.move(to: CGPoint(x: 0, y: 10.5))
        context.saveGState()
        context.translateBy(x: 467, y: 309)
        backChevron.usesEvenOddFillRule = true
        color.setFill()
        backChevron.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfBackChevron() -> UIImage
    {
        struct LocalCache
        {
            static var image: UIImage!
        }
        if LocalCache.image != nil
        {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 13, height: 21), false, 0)
        BackImage.drawBackChevron()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior
    {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect
        {
            if rect == target || target == CGRect.zero
            {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self
            {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
